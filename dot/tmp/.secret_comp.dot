digraph "CFG for 'secret_comp' function" {
	label="CFG for 'secret_comp' function";

	Node0x5565e7b99870 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{entry:\l  %stktop_4 = alloca i8, i32 60, align 1\l  %tos = ptrtoint ptr %stktop_4 to i64\l  %0 = add i64 %tos, 12\l  %RBP_N.48 = inttoptr i64 %0 to ptr\l  %1 = add i64 %tos, 20\l  %RBP_N.40 = inttoptr i64 %1 to ptr\l  %2 = add i64 %tos, 28\l  %RBP_N.32 = inttoptr i64 %2 to ptr\l  %3 = add i64 %tos, 36\l  %RBP_N.24 = inttoptr i64 %3 to ptr\l  %4 = add i64 %tos, 44\l  %RBP_N.16 = inttoptr i64 %4 to ptr\l  %5 = add i64 %tos, 52\l  %RBP_N.8 = inttoptr i64 %5 to ptr\l  %6 = add i64 %tos, 0\l  %RSP_P.0 = inttoptr i64 %6 to ptr\l  store i64 3735928559, ptr %RSP_P.0, align 8\l  %RBP = ptrtoint ptr %RSP_P.0 to i64\l  store i64 %arg1, ptr %RBP_N.8, align 1\l  store i64 %arg2, ptr %RBP_N.16, align 1\l  store i64 %arg3, ptr %RBP_N.24, align 1\l  store i64 %arg4, ptr %RBP_N.32, align 1\l  store i64 %arg5, ptr %RBP_N.40, align 1\l  store i64 %arg6, ptr %RBP_N.48, align 1\l  store i32 0, ptr %stktop_4, align 1\l  br label %bb.1\l}"];
	Node0x5565e7b99870 -> Node0x5565e7b9ae00;
	Node0x5565e7b9ae00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{bb.1:                                             \l  %7 = load i32, ptr %stktop_4, align 1\l  %8 = zext i32 %7 to i64\l  %9 = zext i32 4 to i64\l  %10 = sub i64 %8, %9\l  %11 = call \{ i64, i1 \} @llvm.usub.with.overflow.i64(i64 %8, i64 %9)\l  %CF = extractvalue \{ i64, i1 \} %11, 1\l  %ZF = icmp eq i64 %10, 0\l  %highbit = and i64 -9223372036854775808, %10\l  %SF = icmp ne i64 %highbit, 0\l  %12 = call \{ i64, i1 \} @llvm.ssub.with.overflow.i64(i64 %8, i64 %9)\l  %OF = extractvalue \{ i64, i1 \} %12, 1\l  %13 = and i64 %10, 255\l  %14 = call i64 @llvm.ctpop.i64(i64 %13)\l  %15 = and i64 %14, 1\l  %PF = icmp eq i64 %15, 0\l  %CmpSFOF_JGE = icmp eq i1 %SF, %OF\l  br i1 %CmpSFOF_JGE, label %bb.3, label %bb.2\l|{<s0>T|<s1>F}}"];
	Node0x5565e7b9ae00:s0 -> Node0x5565e7b9c2a0;
	Node0x5565e7b9ae00:s1 -> Node0x5565e7b9c370;
	Node0x5565e7b9c370 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{bb.2:                                             \l  %memload = load i64, ptr %RBP_N.8, align 1\l  %memload1 = load i64, ptr %stktop_4, align 1\l  %16 = trunc i64 %memload1 to i32\l  %RCX = sext i32 %16 to i64\l  %memref-basereg = add i64 %memload, %RCX\l  %17 = inttoptr i64 %memref-basereg to ptr\l  %memload2 = load i32, ptr %17, align 1\l  %18 = trunc i32 %memload2 to i8\l  %EDX = sext i8 %18 to i32\l  %memload3 = load i64, ptr %RBP_N.16, align 1\l  %memload4 = load i64, ptr %stktop_4, align 1\l  %19 = trunc i64 %memload4 to i32\l  %RCX5 = sext i32 %19 to i64\l  %memref-basereg6 = add i64 %memload3, %RCX5\l  %20 = inttoptr i64 %memref-basereg6 to ptr\l  %memload7 = load i32, ptr %20, align 1\l  %21 = trunc i32 %memload7 to i8\l  %ESI = sext i8 %21 to i32\l  %EDX11 = add nsw i32 %EDX, %ESI\l  %highbit8 = and i32 -2147483648, %EDX11\l  %SF9 = icmp ne i32 %highbit8, 0\l  %ZF10 = icmp eq i32 %EDX11, 0\l  %memload12 = load i64, ptr %RBP_N.24, align 1\l  %memload13 = load i64, ptr %stktop_4, align 1\l  %22 = trunc i64 %memload13 to i32\l  %RCX14 = sext i32 %22 to i64\l  %memref-basereg15 = add i64 %memload12, %RCX14\l  %23 = trunc i32 %EDX11 to i8\l  %24 = inttoptr i64 %memref-basereg15 to ptr\l  store i8 %23, ptr %24, align 1\l  %memload16 = load i64, ptr %RBP_N.8, align 1\l  %memload17 = load i64, ptr %stktop_4, align 1\l  %25 = trunc i64 %memload17 to i32\l  %RCX18 = sext i32 %25 to i64\l  %memref-basereg19 = add i64 %memload16, %RCX18\l  %26 = inttoptr i64 %memref-basereg19 to ptr\l  %memload20 = load i32, ptr %26, align 1\l  %27 = trunc i32 %memload20 to i8\l  %ESI21 = sext i8 %27 to i32\l  %memload22 = load i64, ptr %RBP_N.16, align 1\l  %memload23 = load i64, ptr %stktop_4, align 1\l  %28 = trunc i64 %memload23 to i32\l  %RCX24 = sext i32 %28 to i64\l  %memref-basereg25 = add i64 %memload22, %RCX24\l  %29 = inttoptr i64 %memref-basereg25 to ptr\l  %memload26 = load i32, ptr %29, align 1\l  %30 = trunc i32 %memload26 to i8\l  %EDI = sext i8 %30 to i32\l  %ESI27 = mul nsw i32 %ESI21, %EDI\l  %memload28 = load i64, ptr %RBP_N.32, align 1\l  %memload29 = load i64, ptr %stktop_4, align 1\l  %31 = trunc i64 %memload29 to i32\l  %RCX30 = sext i32 %31 to i64\l  %memref-basereg31 = add i64 %memload28, %RCX30\l  %32 = trunc i32 %ESI27 to i8\l  %33 = inttoptr i64 %memref-basereg31 to ptr\l  store i8 %32, ptr %33, align 1\l  %memload32 = load i64, ptr %RBP_N.8, align 1\l  %memload33 = load i64, ptr %stktop_4, align 1\l  %34 = trunc i64 %memload33 to i32\l  %RCX34 = sext i32 %34 to i64\l  %memref-basereg35 = add i64 %memload32, %RCX34\l  %35 = inttoptr i64 %memref-basereg35 to ptr\l  %memload36 = load i32, ptr %35, align 1\l  %36 = trunc i32 %memload36 to i8\l  %EDI37 = sext i8 %36 to i32\l  %memload38 = load i64, ptr %RBP_N.16, align 1\l  %memload39 = load i64, ptr %stktop_4, align 1\l  %37 = trunc i64 %memload39 to i32\l  %RCX40 = sext i32 %37 to i64\l  %memref-basereg41 = add i64 %memload38, %RCX40\l  %38 = inttoptr i64 %memref-basereg41 to ptr\l  %memload42 = load i32, ptr %38, align 1\l  %39 = trunc i32 %memload42 to i8\l  %R8D = sext i8 %39 to i32\l  %EDI43 = sub i32 %EDI37, %R8D\l  %40 = call \{ i32, i1 \} @llvm.usub.with.overflow.i32(i32 %EDI37, i32 %R8D)\l  %CF44 = extractvalue \{ i32, i1 \} %40, 1\l  %ZF45 = icmp eq i32 %EDI43, 0\l  %highbit46 = and i32 -2147483648, %EDI43\l  %SF47 = icmp ne i32 %highbit46, 0\l  %41 = call \{ i32, i1 \} @llvm.ssub.with.overflow.i32(i32 %EDI37, i32 %R8D)\l  %OF48 = extractvalue \{ i32, i1 \} %41, 1\l  %42 = and i32 %EDI43, 255\l  %43 = call i32 @llvm.ctpop.i32(i32 %42)\l  %44 = and i32 %43, 1\l  %PF49 = icmp eq i32 %44, 0\l  %memload50 = load i64, ptr %RBP_N.40, align 1\l  %memload51 = load i64, ptr %stktop_4, align 1\l  %45 = trunc i64 %memload51 to i32\l  %RCX52 = sext i32 %45 to i64\l  %memref-basereg53 = add i64 %memload50, %RCX52\l  %46 = trunc i32 %EDI43 to i8\l  %47 = inttoptr i64 %memref-basereg53 to ptr\l  store i8 %46, ptr %47, align 1\l  %memload54 = load i64, ptr %RBP_N.8, align 1\l  %memload55 = load i64, ptr %stktop_4, align 1\l  %48 = trunc i64 %memload55 to i32\l  %RCX56 = sext i32 %48 to i64\l  %memref-basereg57 = add i64 %memload54, %RCX56\l  %49 = inttoptr i64 %memref-basereg57 to ptr\l  %memload58 = load i32, ptr %49, align 1\l  %50 = trunc i32 %memload58 to i8\l  %EAX = sext i8 %50 to i32\l  %memload59 = load i64, ptr %RBP_N.16, align 1\l  %memload60 = load i64, ptr %stktop_4, align 1\l  %51 = trunc i64 %memload60 to i32\l  %R9 = sext i32 %51 to i64\l  %memref-basereg61 = add i64 %memload59, %R9\l  %52 = inttoptr i64 %memref-basereg61 to ptr\l  %memload62 = load i32, ptr %52, align 1\l  %53 = trunc i32 %memload62 to i8\l  %R8D63 = sext i8 %53 to i32\l  %54 = sext i32 %EAX to i64\l  %55 = lshr i64 %54, 32\l  %EDX64 = trunc i64 %55 to i32\l  %56 = sext i32 %EAX to i64\l  %57 = sext i32 %EDX64 to i64\l  %div_hb_ls = shl nuw i64 %57, 32\l  %dividend = or i64 %div_hb_ls, %56\l  %58 = sext i32 %R8D63 to i64\l  %div_q = sdiv i64 %dividend, %58\l  %EAX65 = trunc i64 %div_q to i32\l  %div_r = srem i64 %dividend, %58\l  %EDX66 = trunc i64 %div_r to i32\l  %memload67 = load i64, ptr %RBP_N.48, align 1\l  %memload68 = load i64, ptr %stktop_4, align 1\l  %59 = trunc i64 %memload68 to i32\l  %R969 = sext i32 %59 to i64\l  %memref-basereg70 = add i64 %memload67, %R969\l  %60 = trunc i32 %EDX66 to i8\l  %61 = inttoptr i64 %memref-basereg70 to ptr\l  store i8 %60, ptr %61, align 1\l  %memload71 = load i32, ptr %stktop_4, align 1\l  %EAX78 = add i32 %memload71, 1\l  %62 = call \{ i32, i1 \} @llvm.uadd.with.overflow.i32(i32 %memload71, i32 1)\l  %CF72 = extractvalue \{ i32, i1 \} %62, 1\l  %63 = and i32 %EAX78, 255\l  %64 = call i32 @llvm.ctpop.i32(i32 %63)\l  %65 = and i32 %64, 1\l  %PF73 = icmp eq i32 %65, 0\l  %ZF74 = icmp eq i32 %EAX78, 0\l  %highbit75 = and i32 -2147483648, %EAX78\l  %SF76 = icmp ne i32 %highbit75, 0\l  %66 = call \{ i32, i1 \} @llvm.sadd.with.overflow.i32(i32 %memload71, i32 1)\l  %OF77 = extractvalue \{ i32, i1 \} %66, 1\l  store i32 %EAX78, ptr %stktop_4, align 1\l  br label %bb.1\l}"];
	Node0x5565e7b9c370 -> Node0x5565e7b9ae00;
	Node0x5565e7b9c2a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{bb.3:                                             \l  ret void\l}"];
}
