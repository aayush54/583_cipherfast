digraph "CFG for 'public_comp' function" {
	label="CFG for 'public_comp' function";

	Node0x5565e7ba0000 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{entry:\l  %stktop_4 = alloca i8, i32 48, align 1\l  %tos = ptrtoint ptr %stktop_4 to i64\l  %0 = add i64 %tos, 12\l  %RBP_N.36 = inttoptr i64 %0 to ptr\l  %1 = add i64 %tos, 16\l  %RBP_N.32 = inttoptr i64 %1 to ptr\l  %2 = add i64 %tos, 20\l  %RBP_N.28 = inttoptr i64 %2 to ptr\l  %3 = add i64 %tos, 24\l  %RBP_N.24 = inttoptr i64 %3 to ptr\l  %4 = add i64 %tos, 32\l  %RBP_N.16 = inttoptr i64 %4 to ptr\l  %5 = add i64 %tos, 40\l  %RBP_N.8 = inttoptr i64 %5 to ptr\l  %6 = add i64 %tos, 0\l  %RSP_P.0 = inttoptr i64 %6 to ptr\l  store i64 3735928559, ptr %RSP_P.0, align 8\l  %RBP = ptrtoint ptr %RSP_P.0 to i64\l  store i64 %arg1, ptr %RBP_N.8, align 1\l  store i64 %arg2, ptr %RBP_N.16, align 1\l  store i64 %arg3, ptr %RBP_N.24, align 1\l  store i32 %arg4, ptr %RBP_N.28, align 1\l  %memload = load i32, ptr getelementptr inbounds ([112 x i8], ptr @rodata_15,\l... i32 0, i32 4), align 1, !ROData_Content !1\l  store i32 %memload, ptr %RBP_N.32, align 1\l  store i32 0, ptr %RBP_N.36, align 1\l  br label %bb.1\l}"];
	Node0x5565e7ba0000 -> Node0x5565e7baa960;
	Node0x5565e7baa960 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{bb.1:                                             \l  %memload1 = load i32, ptr %RBP_N.36, align 1\l  %7 = load i32, ptr %RBP_N.28, align 1\l  %8 = sub i32 %memload1, %7\l  %9 = call \{ i32, i1 \} @llvm.usub.with.overflow.i32(i32 %memload1, i32 %7)\l  %CF = extractvalue \{ i32, i1 \} %9, 1\l  %ZF = icmp eq i32 %8, 0\l  %highbit = and i32 -2147483648, %8\l  %SF = icmp ne i32 %highbit, 0\l  %10 = call \{ i32, i1 \} @llvm.ssub.with.overflow.i32(i32 %memload1, i32 %7)\l  %OF = extractvalue \{ i32, i1 \} %10, 1\l  %11 = and i32 %8, 255\l  %12 = call i32 @llvm.ctpop.i32(i32 %11)\l  %13 = and i32 %12, 1\l  %PF = icmp eq i32 %13, 0\l  %CmpSFOF_JGE = icmp eq i1 %SF, %OF\l  br i1 %CmpSFOF_JGE, label %bb.3, label %bb.2\l|{<s0>T|<s1>F}}"];
	Node0x5565e7baa960:s0 -> Node0x5565e7bab880;
	Node0x5565e7baa960:s1 -> Node0x5565e7bab8f0;
	Node0x5565e7bab8f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{bb.2:                                             \l  %memload2 = load i64, ptr %RBP_N.16, align 1\l  %memload3 = load i64, ptr %RBP_N.36, align 1\l  %14 = trunc i64 %memload3 to i32\l  %RCX = sext i32 %14 to i64\l  %memref-basereg = add i64 %memload2, %RCX\l  %15 = inttoptr i64 %memref-basereg to ptr\l  %memload4 = load i32, ptr %15, align 1\l  %16 = trunc i32 %memload4 to i8\l  %EDX = sext i8 %16 to i32\l  %memload5 = load i64, ptr %RBP_N.24, align 1\l  %memload6 = load i64, ptr %RBP_N.36, align 1\l  %17 = trunc i64 %memload6 to i32\l  %RCX7 = sext i32 %17 to i64\l  %memref-basereg8 = add i64 %memload5, %RCX7\l  %18 = inttoptr i64 %memref-basereg8 to ptr\l  %memload9 = load i32, ptr %18, align 1\l  %19 = trunc i32 %memload9 to i8\l  %ESI = sext i8 %19 to i32\l  %EDX10 = mul nsw i32 %EDX, %ESI\l  %memload11 = load i64, ptr %RBP_N.8, align 1\l  %memload12 = load i64, ptr %RBP_N.36, align 1\l  %20 = trunc i64 %memload12 to i32\l  %RCX13 = sext i32 %20 to i64\l  %memref-basereg14 = add i64 %memload11, %RCX13\l  %21 = trunc i32 %EDX10 to i8\l  %22 = inttoptr i64 %memref-basereg14 to ptr\l  store i8 %21, ptr %22, align 1\l  %memload15 = load i32, ptr %RBP_N.36, align 1\l  %EAX = add i32 %memload15, 1\l  %23 = call \{ i32, i1 \} @llvm.uadd.with.overflow.i32(i32 %memload15, i32 1)\l  %CF16 = extractvalue \{ i32, i1 \} %23, 1\l  %24 = and i32 %EAX, 255\l  %25 = call i32 @llvm.ctpop.i32(i32 %24)\l  %26 = and i32 %25, 1\l  %PF17 = icmp eq i32 %26, 0\l  %ZF18 = icmp eq i32 %EAX, 0\l  %highbit19 = and i32 -2147483648, %EAX\l  %SF20 = icmp ne i32 %highbit19, 0\l  %27 = call \{ i32, i1 \} @llvm.sadd.with.overflow.i32(i32 %memload15, i32 1)\l  %OF21 = extractvalue \{ i32, i1 \} %27, 1\l  store i32 %EAX, ptr %RBP_N.36, align 1\l  br label %bb.1\l}"];
	Node0x5565e7bab8f0 -> Node0x5565e7baa960;
	Node0x5565e7bab880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{bb.3:                                             \l  store i32 0, ptr %stktop_4, align 1\l  br label %bb.4\l}"];
	Node0x5565e7bab880 -> Node0x5565e7badaa0;
	Node0x5565e7badaa0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{bb.4:                                             \l  %memload22 = load i32, ptr %stktop_4, align 1\l  %28 = load i32, ptr %RBP_N.28, align 1\l  %29 = sub i32 %memload22, %28\l  %30 = call \{ i32, i1 \} @llvm.usub.with.overflow.i32(i32 %memload22, i32 %28)\l  %CF23 = extractvalue \{ i32, i1 \} %30, 1\l  %ZF24 = icmp eq i32 %29, 0\l  %highbit25 = and i32 -2147483648, %29\l  %SF26 = icmp ne i32 %highbit25, 0\l  %31 = call \{ i32, i1 \} @llvm.ssub.with.overflow.i32(i32 %memload22, i32 %28)\l  %OF27 = extractvalue \{ i32, i1 \} %31, 1\l  %32 = and i32 %29, 255\l  %33 = call i32 @llvm.ctpop.i32(i32 %32)\l  %34 = and i32 %33, 1\l  %PF28 = icmp eq i32 %34, 0\l  %CmpSFOF_JGE49 = icmp eq i1 %SF26, %OF27\l  br i1 %CmpSFOF_JGE49, label %bb.6, label %bb.5\l|{<s0>T|<s1>F}}"];
	Node0x5565e7badaa0:s0 -> Node0x5565e7bae7d0;
	Node0x5565e7badaa0:s1 -> Node0x5565e7bae840;
	Node0x5565e7bae840 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{bb.5:                                             \l  %memload29 = load i64, ptr %stktop_4, align 1\l  %35 = trunc i64 %memload29 to i32\l  %RAX = sext i32 %35 to i64\l  %36 = getelementptr i8, ptr %RBP_N.32, i64 %RAX\l  %memload30 = load i32, ptr %36, align 1\l  %37 = trunc i32 %memload30 to i8\l  %ECX = sext i8 %37 to i32\l  %memload31 = load i64, ptr %RBP_N.8, align 1\l  %memload32 = load i64, ptr %stktop_4, align 1\l  %38 = trunc i64 %memload32 to i32\l  %RDX = sext i32 %38 to i64\l  %memref-basereg33 = add i64 %memload31, %RDX\l  %39 = inttoptr i64 %memref-basereg33 to ptr\l  %memload34 = load i32, ptr %39, align 1\l  %40 = trunc i32 %memload34 to i8\l  %ESI35 = sext i8 %40 to i32\l  %ESI39 = add nsw i32 %ESI35, %ECX\l  %highbit36 = and i32 -2147483648, %ESI39\l  %SF37 = icmp ne i32 %highbit36, 0\l  %ZF38 = icmp eq i32 %ESI39, 0\l  %memref-basereg40 = add i64 %memload31, %RDX\l  %41 = trunc i32 %ESI39 to i8\l  %42 = inttoptr i64 %memref-basereg40 to ptr\l  store i8 %41, ptr %42, align 1\l  %memload41 = load i32, ptr %stktop_4, align 1\l  %EAX48 = add i32 %memload41, 1\l  %43 = call \{ i32, i1 \} @llvm.uadd.with.overflow.i32(i32 %memload41, i32 1)\l  %CF42 = extractvalue \{ i32, i1 \} %43, 1\l  %44 = and i32 %EAX48, 255\l  %45 = call i32 @llvm.ctpop.i32(i32 %44)\l  %46 = and i32 %45, 1\l  %PF43 = icmp eq i32 %46, 0\l  %ZF44 = icmp eq i32 %EAX48, 0\l  %highbit45 = and i32 -2147483648, %EAX48\l  %SF46 = icmp ne i32 %highbit45, 0\l  %47 = call \{ i32, i1 \} @llvm.sadd.with.overflow.i32(i32 %memload41, i32 1)\l  %OF47 = extractvalue \{ i32, i1 \} %47, 1\l  store i32 %EAX48, ptr %stktop_4, align 1\l  br label %bb.4\l}"];
	Node0x5565e7bae840 -> Node0x5565e7badaa0;
	Node0x5565e7bae7d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{bb.6:                                             \l  ret i32 %memload22\l}"];
}
